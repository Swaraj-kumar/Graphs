//https://leetcode.com/problems/time-needed-to-inform-all-employees/

class Solution {
public:            
            /*      0  1 2 3 4 5 6 7 8 9 10 11 12 13 14
   eg: manager[] = [-1 0 0 1 1 2 2 3 3 4  4  5  5  6  6] 
   In manager array wherever we find -1 then that index will be my root here 0 is my root
  */
     
   /*Basically we are buiding 2D adjacency matrix and wherever we are finding -1 then that element will be my root
   DFS function will give me number of minutes to inform all employees*/
   int numOfMinutes(int n, int headID, vector<int>& manager, vector<int>& informTime) {
   vector<vector<int>> adj(n);
    for(int i=0;i<manager.size();i++){
        if(manager[i] != -1)
        adj[manager[i]].push_back(i);
    }
    return DFS(headID,informTime,adj);
    }
    
    
    int DFS(int headID,vector<int>& informTime,vector<vector<int>> &adj){
        int cost = 0;
        for(auto it: adj[headID]){
            cost = max(cost,DFS(it,informTime,adj));
        }
        //basically we are finding maximum root to leaf path suum
        return informTime[headID] + cost;
    }
};
