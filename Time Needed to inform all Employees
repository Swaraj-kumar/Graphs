//https://leetcode.com/problems/time-needed-to-inform-all-employees/

class Solution {
public:
    int numOfMinutes(int n, int headID, vector<int>& manager, vector<int>& informTime) {
    vector<vector<int>> adj(n);
    for(int i=0;i<manager.size();i++){
        if(manager[i] != -1){
            adj[manager[i]].push_back(i);
        }
    }
    //return BFS(headID,informTime,adj);
    return DFS(headID,informTime,adj);
    }
    /*
    we have pushed queue with headId and with time as 0
    queue first pair will be my emp and second pair will be my time
    total time will be time +  time required to inform that particular employee
    cost will be maxi of cost and total time
    run a loop till adjacent of employee and push that particular adjacent with time
    */
    int BFS(int headID,vector<int> &informTime,vector<vector<int>> &adj){
    queue<pair<int,int>>q;
    q.push({headID,0});
    int cost = 0;
    while(!q.empty()){
        auto it = q.front();
        q.pop();
        int emp = it.first;
        int time = it.second;
        int totalTime = time + informTime[it.first];
        cost = max(cost,totalTime);
        for(int i=0;i<adj[emp].size();i++){
            q.push({adj[emp][i],totalTime});
        }
    }
        return cost;
    }
    

class Solution {
public:            
            /*      0  1 2 3 4 5 6 7 8 9 10 11 12 13 14
   eg: manager[] = [-1 0 0 1 1 2 2 3 3 4  4  5  5  6  6] 
   In manager array wherever we find -1 then that index will be my root here 0 is my root
  */
     
   /*Basically we are buiding 2D adjacency matrix and wherever we are finding -1 then that element will be my root
   DFS function will give me number of minutes to inform all employees*/
    
    int DFS(int headID,vector<int> &informTime,vector<vector<int>> &adj){
        int cost = 0;
        for(auto it : adj[headID]){
            cost = max(cost,DFS(it,informTime,adj));
        }
        return cost + informTime[headID];
    }
};
