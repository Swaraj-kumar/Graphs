https://www.geeksforgeeks.org/find-whether-it-is-possible-to-finish-all-tasks-or-not-from-given-dependencies/


#include <bits/stdc++.h>
using namespace std;

/*
INPUT:
4
1 0
2 1
3 2

OUTPUT:
Possible to finish all tasks
*/

// Returns adjacency list representation from a list of pairs.
vector<unordered_set<int> > make_graph(int n,vector<pair<int, int> >& prerequisites){
	vector<unordered_set<int> > graph(n);
	for (auto it : prerequisites){
		graph[it.second].insert(it.first);
	}
	return graph;
}

// checking cycle in the directed graph.
bool dfs_cycle(vector<unordered_set<int> >& graph, int node,vector<bool>& vis, vector<bool>& dfsVis){
	if (dfsVis[node])
		return false;
	vis[node] = dfsVis[node] = true;
	for (int neigh : graph[node]){
		if (vis[neigh] || dfs_cycle(graph, neigh, vis, dfsVis))
			return true;
	}
	return vis[node] = false;
}

// Main function to check whether possible to finish all tasks or not
bool canFinish(int n, vector<pair<int, int> >& prerequisites)
{
	vector<unordered_set<int> > graph = make_graph(n, prerequisites);
	vector<bool> vis(n, false);
	vector<bool> dfsVis(n, false);
	for (int i = 0; i < n; i++){
		if (!dfsVis[i] && dfs_cycle(graph, i, vis, dfsVis))
			return false;
	}
	return true;
}

int main()
{
	int n;
	cin>>n;

	vector<pair<int, int> > prerequisites;
	//taking inputs
	for(int i=0;i<n;i++){
	    int u,v;
	    cin>>u>>v;
	    prerequisites.push_back(make_pair(u,v));
	}
	// for prerequisites: [[1, 0], [2, 1], [3, 2]]
	if (canFinish(n, prerequisites)) {
		cout << "Possible to finish all tasks";
	}
	else {
		cout << "Impossible to finish all tasks";
	}

	return 0;
}
